z <- c(x, y)
# With the people around you, create a vector "people" that stores each of your names
peopLe <- c("Gloria", "Irene", "Evan", "Sam")
# Create a vector "ages" with each of your ages
age <- c(19, 19, 19, 10)
# Assign the value 100 to a variable x
x <- 100
# Assign the value 200 to a variable y
y <- 200
# Combine x and y into a vector z
z <- c(x, y)
# With the people around you, create a vector "people" that stores each of your names
peopLe <- c("Gloria", "Irene", "Evan", "Sam")
# Create a vector "ages" with each of your ages
age <- c(19, 19, 19, 10)
# Assign the value 100 to a variable x
x <- 100
# Assign the value 200 to a variable y
y <- 200
# Combine x and y into a vector z
z <- c(x, y)
x
people[2]
peopLe <- c('Gloria', 'Irene', 'Evan', 'Sam')
people[1]
age[2]
people <- c('Gloria', 'Irene', 'Evan', 'Sam')
z
# Create a vector 'numbers' with three numbers in it
numbers <- c(13, 14, 15)
# Determine the length of your vector by passing it to the length function
length(numbers)
# Store the length of your vector in a variable called my_length
seq(1:4)
x[1]
help(c)
help("paste")
print(phrase)
phrase <- paste('my major is', major)
phrase <- paste('my major is', major)
### Numeric / character variables ###
# Create a variable 'puppies' equal to the number of puppies you'd like to have
puppies <- 0
# Create a variable 'cost', which is how expensive you think a puppy is
cost <- 200
# Create a variable 'total_cost' that has the total cost of all of your puppies
total_cost <- 0
# Assign your (intended/potential) major to a variable 'major'
major <- 'informatics'
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
phrase <- paste('my major is', major)
### Vectors ###
# Create a vector 'classes', which is a list of all the classes you're currently taking
classes <- c(info498, geog123, ling200)
# Create a variable 'num_classes' by measuring the length of your 'classes' vector
num_classes <- length(classes)
# Create a variable 'favorite_class' by retrieving your favorite class out of the 'classes' vector
favorite_class <- classes[1]
# Create a variable 'hours_per_week' that has the number of hours you spend working on each class
hours_per_week
# Create a variable 'hard_week' in which you work 1.5x as long as a normal week
# Use the seq command to create a vector 'nums' with numbers 100 through 199
seq(100:199)
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
phrase
first_ten <- num[1:10]
first_ten <- nums[1:10]
### Numeric / character variables ###
# Create a variable 'puppies' equal to the number of puppies you'd like to have
puppies <- 0
# Create a variable 'cost', which is how expensive you think a puppy is
cost <- 200
# Create a variable 'total_cost' that has the total cost of all of your puppies
total_cost <- 0
# Assign your (intended/potential) major to a variable 'major'
major <- 'informatics'
# Use the paste command to create a  variable 'phrase'
# The 'phrase' variable should combine the string "My major is ", and the name of your major
phrase <- paste('my major is', major)
### Vectors ###
# Create a vector 'classes', which is a list of all the classes you're currently taking
classes <- c('info498', 'geog123', 'ling200')
# Create a variable 'num_classes' by measuring the length of your 'classes' vector
num_classes <- length(classes)
# Create a variable 'favorite_class' by retrieving your favorite class out of the 'classes' vector
favorite_class <- classes[1]
# Create a variable 'hours_per_week' that has the number of hours you spend working on each class
hours_per_week <- 10
# Create a variable 'hard_week' in which you work 1.5x as long as a normal week
hard_week <- '10th'
# Use the seq command to create a vector 'nums' with numbers 100 through 199
nums <- seq(100:199)
# Create a variable 'first_ten' which has the first 10 values in your 'nums' variable
first_ten <- nums[1:10]
first_ten <- nums[1:10]
first_ten
first_ten <- nums[1]
first_ten
nums
nums <- seq(100,199)
nums
first_ten <- nums[1:10]
first_ten
x <- c(10:20)
x
x <- 10:20
x
z <- (x, y)
z <- c(x, y)
w <- z[11]
w
odd <- seq((seq(1,100) % 2 = 1))
j <- seq(1,100)
i <- 2 *i -1
i <- 2 * j -1
help(all)
if(all(odd %% 2 = 1)) cat("all x values are negative\n")
help(%%)
if(all(odd %% 2 == 1)) cat("all x values are negative\n")
odd <- 2 * j -1
if(all(odd %% 2 == 1)) cat("all x values are negative\n")
if(all(odd %% 2 == 1)) cat("all odd values are odd\n")
x <- c(5,2,6,2,1,7)
y <- c(2,3)
z <- c(x ,y)
z <- x + y
small <- z[z<5]
small
large <- z[z >= 5]
large
help(replace)
replace(z, z[z>=5], 5)
replace(z, length(z), 0)
x[x>=5]=0
x
x[x<5]=0
x[x>=5]=5
x[x<5]=0
x
x[x>5]=5
x
x[x>5]= 5
x
x(x > 5)= 5
z(z > 5)= 5
z[z > 5]= 5
z
z[x <5] =0
z
z[z <5] =0
z
z[z > 5]= 5
z[z <5] =0
z
z[z > 5]= 5
z
z <- x + y
z
### Subsetting vectors ###
# Create a vector "x" that the numbers 5,2,6,2,1,7
x <- c(5,2,6,2,1,7)
# Create a vector "y" that has the numbers 2,3
y <- c(2,3)
# Create a vector "z" by adding "x" and "y" (note the recycling!)
z <- x + y
# Create a vector "first_three" that has the first three elements of "z" in it
first_three <- z[1:3]
# Create a vector "small" that has the values of "z" that are less than 5
small <- z[z<5]
# Create a vector "large" that has the values of "x" that are greater than or equal to 5
large <- z[z >= 5]
### Bonus ###
# Replace the values in "z" that are larger than 5 with the number 5
z[z > 5]= 5
# Replace every other value in "z" with the number 0
z[z <5] =0
z
z[z <= 5] =0
z
### Subsetting vectors ###
# Create a vector "x" that the numbers 5,2,6,2,1,7
x <- c(5,2,6,2,1,7)
# Create a vector "y" that has the numbers 2,3
y <- c(2,3)
# Create a vector "z" by adding "x" and "y" (note the recycling!)
z <- x + y
# Create a vector "first_three" that has the first three elements of "z" in it
first_three <- z[1:3]
# Create a vector "small" that has the values of "z" that are less than 5
small <- z[z<5]
# Create a vector "large" that has the values of "x" that are greater than or equal to 5
large <- z[z >= 5]
### Bonus ###
# Replace the values in "z" that are larger than 5 with the number 5
index <- z <= 5
z[z > 5]= 5
# Replace every other value in "z" with the number 0
z[index] =0
z
return(x+3)
### Functions ###
# Write a function "add_three" that adds 3 to a value
odd_three <- function(x)
return(x+3)
# Create a variable "result" by passing 7 to your "add_three" function
result(7)
# Create a vector "x" that has the number 1 through 100
# Create a variable "result_vector" by passing x to your "add_three" function
# Write a function "feet_to_meters" that converts from feet to meter
# Create a variable "height_in_meters" by passing your height in feet to your "feet_to_meters" function
result
result <- odd_three(7)
result
x <- 1:100
result_vector <- odd_three(x)
result_vector
return(feet * 0.3048)
feet_to_meters <- function(feet)
return(feet * 0.3048)
height_in_meters <- feet_to_meters(5)
height_in_meters
compare_length <- function(length1, length2)
return(abs(length1,length2))
return(paste('The difference in lengths is", abs(length(a) -length(b))
return('The difference in lengths is', abs(length(a) -length(b))
return('The difference in lengths is', abs(length(a) -length(b)))
?abs
return('The difference in lengths is', abs(length(a) -length(b)))
print('The difference in lengths is', abs(length(a) -length(b)))
print('The difference in lengths is', abs(length(a) -length(b)))
paste('The difference in lengths is', abs(length(a) -length(b)))
return('The difference in lengths is', abs(length(a) -length(b)))
# Pass two vectors of different length to your "compare_length" function
### Writing Functions ###
# Write a function "compare_length" that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
compare_length <- function(a, b)
value <- abs(length(a) -length(b))
return('The difference in lengths is', value)
# Pass two vectors of different length to your "compare_length" function
# Write a function "describe_difference" that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
# Pass two vectors to your "describe_difference" function
### Bonus ###
# Rewrite your "describe_difference" function to tell you the name of the vector which is longer
}
# Write a function "compare_length" that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
compare_length <- function(a, b) {
return('The difference in lengths is ', length(a) -length(b))
}
# Pass two vectors of different length to your "compare_length" function
compare_length(1:10, 1:20)
return('The difference in lengths is ', diff )
### Writing Functions ###
# Write a function "compare_length" that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
compare_length <- function(a, b) {
len_a <- length(a)
len_b <- length(b)
diff <- len_a - len_b
return('The difference in lengths is ', diff )
}
# Pass two vectors of different length to your "compare_length" function
compare_length(1:10, 1:20)
# Write a function "describe_difference" that will return one of the following statements:
# "Your first vector is longer by N elements"
# "Your second vector is longer by N elements"
# Pass two vectors to your "describe_difference" function
### Bonus ###
# Rewrite your "describe_difference" function to tell you the name of the vector which is longer
}
### Writing Functions ###
# Write a function "compare_length" that takes in 2 vectors, and returns the sentence:
# "The difference in lengths is N"
compare_length <- function(a, b) {
len_a <- length(a)
len_b <- length(b)
diff <- len_a - len_b
return(paste('The difference in lengths is ', diff ))
}
compare_length(1:10, 1:20)
```{r, echo = FALSE}
library('jsonlite')
library('knitr')
library('dplyr')
base <- 'https://api.github.com/users/'
# Create a variable that stores the name of our GitHub organization, INFO-498F
github_org <- 'INFO-498F'
access_token <- '5ede1e57bdc1e672a25980d5ffbcfc90806a8886'
search <- paste0(base, github_org, '?access_token=', access_token)
# Create a variable that contains the data about the user from GitHub
info_info498f <- fromJSON(search)
# Run another requests to get users' repositories and the repositories are sorted in descending order
# by created property with the maximum number of repos 100.
user_repo <- fromJSON(paste0(base, github_org, 'repos?sort=create&order=desc&per_page=100&access_token=
5ede1e57bdc1e672a25980d5ffbcfc90806a8886'))
# split out columns that are data.frames into multiple columns.
user_repo <- flatten(user_repo)
# Get the number of repositories that user has
number <- nrow(user_repo)
# Get the most popular repository of that user
most_popular <- filter()
```
5ede1e57bdc1e672a25980d5ffbcfc90806a8886'))
user_repo <- fromJSON(paste0(base, github_org, '/repos?sort=create&order=desc&per_page=100&access_token=
5ede1e57bdc1e672a25980d5ffbcfc90806a8886'))
user_repo <- fromJSON(paste0(base, github_org, '/repos?sort=create&order=desc&per_page=100&access_token=',
access_token))
user_repo <- flatten(user_repo)
base <- 'https://api.github.com/users/'
# Create a variable that stores the name of our GitHub organization, INFO-498F
github_org <- 'INFO-498F'
access_token <- '5ede1e57bdc1e672a25980d5ffbcfc90806a8886'
search <- paste0(base, github_org, '?access_token=', access_token)
# Create a variable that contains the data about the user from GitHub
data_info498f <- fromJSON(search)
# Run another requests to get users' repositories and the repositories are sorted in descending order
# by created property with the maximum number of repos 100.
user_repo <- fromJSON(paste0(base, github_org, '?access_token=',access_token,                'sort=create&order=desc&per_page=100'))
# split out columns that are data.frames into multiple columns.
user_repo <- flatten(user_repo)
# Get the number of repositories that user has
number <- nrow(user_repo)
# Get the most popular repository of that user
most_popular <- filter(user_repo, forks_count == max(forks_count)) %>% select(name)
```
User `r github_org` has `number` number of repositories and among these repositories, `most_popular` is the most popular one(s).
Here is a avatar image of the user:
![Avatar image](` data_info498f$avatar_url`)
```{r, echo = FALSE, message = FALSE}
# create a column in the repos data frame that stores the date the repo was created
user_repo$date <- as.Date(user_repos$created_at) %>% format(format = '%b %d %Y')
# Narrow down the data frame to several columns with useful infomation with it
modified_data <- select(user_repo, name, language, private, forks_count, date)
user_repo <- fromJSON(paste0(base, github_org, '?access_token=',access_token,                'sort=create&order=desc&per_page=100'))
user_repo <- fromJSON(paste0(base, github_org, '/repos?sort=created&order=desc&per_page=100&access_token=',access_token))
user_repo <- flatten(user_repo)
number <- nrow(user_repo)
most_popular <- filter(user_repo, forks_count == max(forks_count)) %>% select(name)
user_repo$date <- as.Date(user_repos$created_at) %>% format(format = '%b %d %Y')
user_repo$date <- as.Date(user_repo$created_at) %>% format(format = '%b %d %Y')
user_repo$date
modified_data <- select(user_repo, name, language, forks_count, date)
modified_data
modified_data <- select(user_repo, name, language, folks, forks_count, date)
View(user_repo)
modified_data <- select(user_repo, name, language, permissions.pull, forks_count, date)
modified_data
modified_data <- select(user_repo, name, language, forks_count, date)
names(modified_data)[1] <- 'Name'
names(modified_data)[2] <- 'Programming Language'
names(modified_data)[3] <- 'Forks Count'
names(modified_data)[4] <- 'Date Created'
summary_table <- user_repo %>%
group_by(language) %>%
summarise(total_number = n(), average_num = mean(forks_count, na.rm = TRUE))
summary_table
image <- data_info498f$avatar_url
pie(average_num,labels=paste0(round(average_num,2)),col=cols)
pie(summary_table$average_num,labels=paste0(round(summary_table$average_num,2)),col=cols)
pie(summary_table$average_num,labels=paste0(round(summary_table$average_num,2)))
legend('bottom',legend=summary_table$language,pch='■',ncol=nrow(dat),bty='n',col=cols);
legend('bottom',legend=summary_table$language,pch='■',ncol=nrow(language),bty='n');
legend('bottom',legend=summary_table$language,pch='■',ncol=nrow(summary_table$language),bty='n');
legend('bottom',legend=summary_table$language,pch='■',bty='n');
pie(summary_table$average_num,labels=paste0(round(summary_table$average_num,2)))
legend('bottom',legend=summary_table$language,pch='■',bty='n');
legend('bottom',legend=summary_table$language,pch='■',bty='n')
library(jsonlite)
library(knitr)
library(dplyr)
base <- 'https://api.github.com/users/'
# Create a variable that stores the name of our GitHub organization, INFO-498F
github_org <- 'INFO-498F'
access_token <- '5ede1e57bdc1e672a25980d5ffbcfc90806a8886'
search <- paste0(base, github_org, '?access_token=', access_token)
# Create a variable that contains the data about the user from GitHub
data_info498f <- fromJSON(search)
# Run another requests to get users' repositories and the repositories are sorted in descending order
# by created property with the maximum number of repos 100.
user_repo <- fromJSON(paste0(base, github_org, '/repos?sort=created&order=desc&per_page=100&access_token=',  access_token))
# split out columns that are data.frames into multiple columns.
user_repo <- flatten(user_repo)
# Get the number of repositories that user has
number <- nrow(user_repo)
# Get the most popular repository of that user
most_popular <- filter(user_repo, forks_count == max(forks_count)) %>% select(name)
pie(summary_table$average_num, labels = paste0(round(summary_table$average_num, 2)))
library(jsonlite)
library(knitr)
library(dplyr)
base <- 'https://api.github.com/users/'
# Create a variable that stores the name of our GitHub organization, INFO-498F
github_org <- 'INFO-498F'
access_token <- '5ede1e57bdc1e672a25980d5ffbcfc90806a8886'
search <- paste0(base, github_org, '?access_token=', access_token)
# Create a variable that contains the data about the user from GitHub
data_info498f <- fromJSON(search)
# Run another requests to get users' repositories and the repositories are sorted in descending order
# by created property with the maximum number of repos 100.
user_repo <- fromJSON(paste0(base, github_org, '/repos?sort=created&order=desc&per_page=100&access_token=',  access_token))
# split out columns that are data.frames into multiple columns.
user_repo <- flatten(user_repo)
# Get the number of repositories that user has
number <- nrow(user_repo)
# Get the most popular repository of that user
most_popular <- filter(user_repo, forks_count == max(forks_count)) %>% select(name)
user_repo$date <- as.Date(user_repo$created_at) %>% format(format = '%b %d %Y')
# Narrow down the data frame to several columns with useful infomation with it
modified_data <- select(user_repo, name, language, forks_count, date)
# Rename some columns to make the table more readable
names(modified_data)[1] <- 'Name'
names(modified_data)[2] <- 'Programming Language'
names(modified_data)[3] <- 'Forks Count'
names(modified_data)[4] <- 'Date Created'
```
Here is a table showing the name, programming language, forks count and date created about Github User
```{r, echo = FALSE}
kable(modified_data)
```
Here is a summary table showing the number of repositories and the average number of forks for each language
```{r, echo = FALSE}
summary_table <- user_repo %>%
group_by(language) %>%
summarise(total_number = n(), average_num = mean(forks_count, na.rm = TRUE))
kable(summary_table)
pie(summary_table$average_num, labels = paste0(round(summary_table$average_num, 2)))
legend('bottom', legend = summary_table$language, pch = '■', bty = 'n')
library(jsonlite)
library(knitr)
library(dplyr)
shiny::runApp('Desktop/UW/info498f/lecture-14-exercises/shiny-example')
View(Iris)
View(iris)
library(shiny)
shinyServer(function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
})
shiny::runApp('Desktop/UW/info498f/assignment8')
shiny::runApp('Desktop/UW/info498f/assignment8')
shiny::runApp('Desktop/UW/info498f/assignment8')
shiny::runApp('Desktop/UW/info498f/assignment8')
shiny::runApp('Desktop/UW/info498f/assignment8')
shiny::runApp('Desktop/UW/info498f/assignment8')
build_histogram <- function(dataset, col1) {
p <- plot_ly(dataset,
x = eval(parse(text = col1)),
autobinx = F,
type = "histogram",
xbins = list(start = minx, end = maxx, size = size)) %>%
# style the xaxis
layout(p, xaxis = list(title = "Histogram of Iria Data",
range = c(minx, maxx),
autorange = F,
autotick = F,
tick0 = minx,
dtick = size)) %>%
return()
}
build_histogram <- function(dataset, col1) {
p <- plot_ly(dataset,
x = eval(parse(text = col1)),
autobinx = F,
type = "histogram",
xbins = list(start = minx, end = maxx, size = size)) %>%
# style the xaxis
layout(p, xaxis = list(range = c(0, max(dataset[,eval(parse(text = "col1"))]) * 1.2), title = col1),
range = c(minx, maxx),
main = 'Histogram of Iris Data',
autorange = F,
autotick = F,
tick0 = minx,
dtick = size)) %>%
return()
}
build_histogram <- function(dataset, col1) {
p <- plot_ly(dataset,
x = eval(parse(text = col1)),
autobinx = F,
type = "histogram",
xbins = list(start = minx, end = maxx, size = size)) %>%
# style the xaxis
layout(p, xaxis = list(range = c(0, max(dataset[,eval(parse(text = "col1"))]) * 1.2), title = col1),
range = c(minx, maxx),
main = 'Histogram of Iris Data',
autorange = F,
autotick = F,
tick0 = minx,
dtick = size) %>%
return()
}
shiny::runApp('Desktop/UW/info498f/assignment8')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
